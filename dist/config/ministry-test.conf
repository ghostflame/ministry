## The Ministry of Statistics, Ministry-test, basic config

#  The config assumes a basic format of
#  variable = value

#  Leading and trailing whitespace are trimmed, as is whitespace around the =
#  sign.  If no value is presented, a value of 1 is assumed, allowing bare
#  values to toggle on behaviour.


## Including Files

#  Further source can be read in, using the mechanism of
#  include = [?]<file path|url> <args>

#  The current section context is preserved and included files are read in
#  before continuing with the previous file.  Circular inclusion loops are
#  detected, and moaned about.

#  Arguments passed into an include can be accessed in the included file as
#  %1%, %2%, ...  Circular inclusion detection accounts for these arguments.
#  This is designed to permit the trivial creation of complex config, (though
#  mainly this is used in ministry-test) by including a single config file
#  multiple times with different arguments

#  If the target path|url begins with a ? then it is considered optional -
#  if it does not exist, or cannot be read or fetched, then a warning is
#  issued by processing continues.  Ministry-test will stil error out if it
#  is accessible but invalid.


## Foreach

#  Ministry-test includes an interator mechanism, which will repeat the
#  following line with each value it iterates over.  It takes two forms

#foreach <word> <word> ...

#  This form will call the next line for each of the words passed in.

#foreach <lower> - <upper> [<step>]

#  This form will count from integer lower up to and including upper, using
#  step to increment (step defaults to 1).  Eg  "10 - 20 2" would supply each
#  of 10, 12, 14, 16, 18, 20.

#  The typical next line is an include, and this is useful for building up
#  a large pattern of metrics to submit.



## Config File Sections

[Main]
#  Basedir is used to chdir to and forms the path for any relative filenames
#baseDir = /

#  Pidfile can be overridden on the command line, and the init script does do
#  that!
#pidFile = /var/run/ministry/ministry-test.pid

#  The tick_msec value is used by an internal thread to mark time, and it
#  also helps define the responsiveness of ministry to shutdown
#tickMsec = 20

#  By default, ministry-test alters its nofile and nproc limits to the current
#  hard limit, but these can be set lower if desired.
#limits.procs = 4096
#limits.files = 4096

#  Normally ministry-test will remain connected to the initiating terminal, to
#  support such run environments as supervisord.  However, either via config
#  or a command-line option, ministry-test can background itself with th
#  daemon() system call, disconnecting from the terminal.
#daemon = 0


[Logging]
#  Log level is one of: debug info notice warn err fatal
#  Either notice or info is recommended
#level = info

#  Logging is buffered up until the file is opened successfully.  If you are
#  Using logrotate, a pkill -HUP ministry-test will cause the file to be closed
#  and reopened.

#  Ministry-test can log to syslog, and the special filename 'syslog' will
#  cause this behaviour.  By default, however, ministry-test logs to stdout,
#  to make it easier to use in containers
#file = -

#  When the log file is reopened after log rotation (a HUP signal causes the
#  file handle to be closed and opened) the logger writes a line to say that
#  the log file was re-opened.  This means it will always be a non-zero file
#  size, meaning logrotate notifempty will not trigger.  This is turned on by
#  default, so set to zero if you wish to disable this line.
#notify = 1

#  Some syslog setups print the syslog level; some do not.  So the writing of
#  the log level in the message can be controlled.  It is on by default.
#writeLevel = 1

#  When using syslog, ministry-test defaults to LOG_LOCAL4 facility and
#  identifier 'ministry-test'.  These can be set (though have no effect unless
#  syslog output is selected.
#facility = LOG_LOCAL4
#identifier = ministry-test


[Memory]
#  This is the direct control of the memory management code within
#  ministry-test.  It eschews a lot of malloc and free in favour of keeping
#  structures #  and re-using them.  This gives us some tuning parameters and
#  avoids long-term fragmentation issues.

#  Ministry-test keeps an eye on its overall RSS, and will exit if it uses too
#  much.  This is because it buffers up data to send to currently disconnected
#  targets.  The default is 3GB
#  default settings, so it also has more short term protection against being
#  flooded with one-time paths.  The default is 3GB
#maxMB = 3072

#  The maxMb value is also expressible as max KB if you want more precise
#  control.  Don't use both - last one wins
#maxKB = 3145728

#  The interval of memory checking is configurable as well - this is how
#  many MSEC ministry-test waits in betweeen RSS checks
#interval = 5000

#  The memory checking routine can be disabled, but is on by default
#doChecks = 1

#  Ministry-test can pre-allocate busy memmory types to try and avoid the
#  rather expensive brk() call to allocate more space for them happening
#  within a send/process cycle.  It looks for the free count of a type of object
#  falling below about a third of its allocation block size and pre-emptively
#  allocates some more.  If your installation is subject to very rapid onset
#  of load, like in-rush load tests of the monitored estate, this can be
#  tuned lower.  Value is in MSEC.
#prealloc = 50



#  Each of ministry-test's memory-controlled types is pre-allocated in blocks
#  which are made into the 'free list' of structs of that type.  They all
#  have ->next elements first, and that's how it works.  So each can be
#  pre-allocated in configurable blocks.  Powers of two please.  Future
#  releases might force this by changing it to require the power of two to
#  use, not the resulting number (eg 128 might become 7)

#  Iobufs are used for sending data on to targets, and receiving from hosts
#iobufs.block = 128

#  Iobps (IO buf pointers) is used to manage sending one buf to multiple
#  targets
#iobps.block = 512

#  Htreqs are http request objects
#htreqs.block = 128



[Http]
#  Ministry-test uses libmicrohttpd to embed a webserver.  It uses it for a
#  variety of tasks - issuing tokens, controlling targets realtime, offering
#  stats and status.

#  Libmicrohttpd understands HTTPS and can manage ciphers and certificates,
#  so a little config is provided to govern that.  Certificates provide one
#  of the few breaks to ministry's lights-out philosophy, in that if a cert
#  requires a password and you do not wish to store it anywhere in config,
#  ministry-test can interactively prompt the user on the command-line for the
#  password.

#  Which port ministry-test listens on is specified for http and https, and
#  which is in use is determined by whether https is enabled.
#port = 9080

#  Ministry-test can bind either to a specific IP address or to all interfaces
#bind = 0.0.0.0

#  The entire webserver can be enabled or disabled.  It is off by default.
#enable = 0


#  Ministry0test exposes libmicrohttpd's controls on maximum connections per
#  IP, maximum overall and connection timeouts.
#conns.max = 256
#conns.maxPerIP = 64

#  The timeout is in seconds
#conns.timeout = 10


#  Control of TLS is around certificates and ciphers.  Ministry-test uses the
#  facilities of libmicrohttpd to handle this.

#  Determines whether TLS is enabled
#tls.enable = 0

#  The TLS port is not the same as the non-TLS port normally, but there is
#  no problem setting them to be the same.  Whether TLS is enabled or not
#  determines which port ministry-test uses.
#tls.port = 9443

#  Certificate and key files are relative to the basedir unless they begin
#  with a /
#tls.certFile =
#tls.keyFile =

#  If a password is needed for the keyfile, it should be provided in config
#  or interactively on startup (ministry can prompt for it if required -
#  this is set either by passing the -K flag, or configuring the password
#  as the special value "-".  The special value "null" will keep the
#  password unset (it is provided as a reminder for the admin that there is
#  no password set on the key).
#tls.keyPass =


#  Ministry sets a TLS priorities string (see
#  https://gnutls.org/manual/html_node/Priority-Strings.html).  This allows
#  control of ciphers and protocols for TLS.  The default enabled TLSv1.3,
#  TLSv1.2, and only 256-bit ciphers from certain suites.  Change this if
#  you need to support clients with older TLS libraries.  At some point in
#  the future, ministry-test will remove support for TLSv1.2.
#tls.priority = "SECURE256:!VERS-TLS1.1:!VERS-TLS1.0:!VERS-SSL3.0:%SAFE_RENEGOTIATION"



[Iplist]
#  Ministry-test has the concept of IP lists - a list of whitelist/blacklist
#  entries used to decide if an IP address matches for a given purpose.
#  Rather than have them at the site of the calling config - for example,
#  prefixing, or accept filtering, ministry-test has named IP lists, which
#  are then referenced by these calling configs.  There is no limit to the
#  number of them.

#  In ministry-test, they are only used to control the HTTP interface.

#  Lists need a unique name, a hashsize (individual IPs are hashed, but
#  networks done with masking).  They can be logged out during startup if
#  marked as verbose.  They can default to match or miss.  They can be
#  individually enabled/disabled.

#  IP lists can take a parameter after the IP spec, which is recorded as
#  text.  This is the way they are used for prefixing, where the text
#  after a given entry is used as the prefix.  The other use case is for
#  filtering connections; any text after the spec will be ignored.

#  Each IP list is configured with a set of entries, terminating in a
#  'done' statement.  Ordering of list entries is preserved, and they are
#  checked in that order.  So, if there are three entries:

#  match:  10.0.1.0/24
#  miss:   10.0.0.0/22
#  match:  10.0.0.0/16

#  Then 10.0.1.2 will match, 10.0.0.2 will not, but 10.0.20.2 will.

#  An example filter list looks like this:
#name = Approved Hosts
#enable = 1
#default = 0
#verbose = 0
#hashsize = 2003
#match = 10.32.0.0/23
#match = 10.32.2.0/23
#match = 10.32.7.161
#match = 10.32.7.162
#match = 10.32.7.163
#miss = 10.32.0.0/18
#match = 10.32.0.0/16
#done




[Io]
#  Ministry-test's network IO is asynchronous with threads that write to
#  network, to prevent blocking during time-sensitive operations.  It also
#  has the virtue that sending the same content to multiple targets becomes
#  easy, as #  buffers are written and then attached to IO threads to writing.
#  Multiple targets are indepdendently tracked, with IO buffering handled
#  separately, #  so one unresponsive target will not prevent working ones
#  from receiving data.

#  This means that separate threads are created for each target, and they
#  will look for data to send on an interval.  This is controllable in
#  either USEC or MSEC.
#sendUsec = 11000
#  or
#sendMsec = 11

#  Ministry-test will pause before attempting to reconnect to a dead target,
#  as the most likely cause is either a process restart or host restart, and
#  those may not be instant.
#reconnectMsec = 2000



[Target]
#  Ministry-test expects to find a set of targets, for each of the different
#  kinds of metrics is might sent.  It ties up the name of the target with
#  the type, so targets should be named 'stats', 'adder', 'gauge' or 'compat'.
#  If no port is given, it will default to the default ministry port for that
#  type.

#  An example target.
#name = stats
#host = 127.0.0.1
#port = 9125
#type = adder
#enable = 1
#maxWaiting = 1024
#done



[Metric]
#  Ministry-test calculates new values for configured metrics, and sends the
#  new values to the configured targets.  The frequency of update, sending,
#  and any sending repeats (a CPU-cheap way to increase load on ministry),
#  are configurable.

#  Metrics come in groups, and groups can be nested.  Config can sit at any
#  level and is inherited.  Metrics specify the algorithm used to update
#  them, giving plausible variation in metrics (this can be important for
#  getting realistic values from stats production, as it gives realistic
#  data sort input).

#  Reporting intervals default to 10000 ms (suiting adder metrics).  For
#  stats types, it should be smaller, as this determines how often a send
#  cycle happens.  Values can be expressed either in milliseconds, or as a
#  fraction of a second (shown in the second example group).

#  Repeat value determines how many times metrics are repeated during
#  reporting.

#  Update interval determines how often the value algorithm is run.  Very
#  small intervals can be quite CPU intensive.  It doesn't make a lot of
#  sense to update more often than reporting, but it is independent.

#  Group parents do not have to be declared ahead of child groups, as the
#  lookups of parent group names does not happen until after all config has
#  been read.

#  Update models available:
#    track_mean      - random walk around the mean
#        Val 1       - mean
#        Val 2       - max variation in one step
#        Val 3       - unused
#        Val 4       - unused
#    track_mean_pos  - random walk around the mean, >= 0
#        Val 1       - mean
#        Val 2       - max variation in one step
#        Val 3       - unused
#        Val 4       - unused
#    floor_up        - exponentially control value above a floor
#        Val 1       - floor
#        Val 2       - normality power (4-7 is good)
#        Val 3       - variation base (floor / (5-15) is good)
#        Val 4       - variation multiplier (2-4 is good)
#    sometimes_track - sometimes track around a mean (good for gauges)
#        Val 1       - mean
#        Val 2       - max variation in one step
#        Val 3       - unused
#        Val 4       - probability of making a change per update cycle
#

#  Metric lines have the following fields:
#    1 - Field type - adder, stats, gauge or compat - must match the group
#    2 - Model      - Which model from the above to use
#    3 - Val 1      - see model details
#    4 - Val 2      - see model details
#    5 - Val 3      - see model details
#    6 - Val 4      - see model details
#    7 - Path       - Path for this metric



#  Some example groups:

#group = This-is-a-parent-group
#prefix = various.metrics.
#target = stats
#report = 50
#repeat = 1
#done

#group = Specific Metrics
#parent = This-is-a-parent-group
#metric = stats floor_up 100 4 12 3 response_time
#metric = stats track_mean_pos 1400 80 0 0 total_mem_used
#done


#  Because ministry-test is used to test ministry itself, making
#  configs that result in a lot of metrics easily is necessary.

#  That is there the 'foreach' mechanism comes in useful, in combination
#  with include with parameters.  EG.


#  Example config file:  "httpd.conf"
#group = http_metrics_%1%
#prefix = webserver%1%.request.
#report = /100
#update = /30
#metric = stats floor_up 100 4 12 3 time.200
#metric = stats floor_up 250 24 0 0 mem.200

#group = http_metrics_rare_%1
#report = /5
#update = /5
#metric = stats floor_up 5 5 15 2 time.501
#metric = stats floor_up 5 5 10 2 time.503
#done

#done

# // end httpd.conf


#  Example config file:  "config_many.conf"
#[Metric]
#
#foreach = 001 - 199
#include = ./httpd.conf

# // end config_many.conf


# In this example, httpd_conf will be included 200 times, with %1%
# subsituting for 1 to 199, with the format string %03ld - so the
# width will be consistent.  That would create 400 groups, and
# approximately ( 2 * 100 * 200 ) + ( 2 * 5 * 200 ) = 42000
# values/second spread across 800 paths.

