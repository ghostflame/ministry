## The Ministry of Statistics, Archivist, basic config

#  The config assumes a basic format of
#  variable = value

#  Leading and trailing whitespace are trimmed, as is whitespace around the =
#  sign.  If no value is presented, a value of 1 is assumed, allowing bare
#  values to toggle on behaviour.


## Including Files

#  Further source can be read in, using the mechanism of
#  include = [?]<file path|url> <args>

#  The current section context is preserved and included files are read in
#  before continuing with the previous file.  Circular inclusion loops are
#  detected, and moaned about.

#  Arguments passed into an include can be accessed in the included file as
#  %1%, %2%, ...  Circular inclusion detection accounts for these arguments.
#  This is designed to permit the trivial creation of complex config, (though
#  mainly this is used in ministry-test) by including a single config file
#  multiple times with different arguments

#  If the target path|url begins with a ? then it is considered optional -
#  if it does not exist, or cannot be read or fetched, then a warning is
#  issued by processing continues.  Archivist will stil error out if it is
#  accessible but invalid.


## Foreach

#  Archivist includes an interator mechanism, which will repeat the following
#  line with each value it iterates over.  It takes two forms

#foreach <word> <word> ...

#  This form will call the next line for each of the words passed in.

#foreach <lower> - <upper> [<step>]

#  This form will count from integer lower up to and including upper, using
#  step to increment (step defaults to 1).  Eg  "10 - 20 2" would supply each
#  of 10, 12, 14, 16, 18, 20.

#  Typical usage is in ministry-test, and the typical next line is an include,
#  but it works for all Ministry apps as well.


## Time Spans

#  Archivist config includes various time spans.  These should be cited as
#  <number><unit>.  Archivist will match the unit with shortest match against
#  a list.  The smallest unit is microseconds, which is the default if no
#  unit is given.  As several units abbreviate to 'm' (minutes, milliseconds,
#  months and microseconds), the order of evaluation is important.  So the
#  order is:

#  years
#  weeks|wks
#  days
#  hours|hrs
#  minutes
#  seconds
#  msec|milliseconds
#  months
#  usec|microseconds

#  So 'm' is minutes, as is 'mi', 'ms' is milliseconds, 'mo' is months, and
#  'mic' is microseconds.



## Config File Sections

[Main]
#  Basedir is used to chdir to and forms the path for any relative filenames
#baseDir = /

#  Pidfile can be overridden on the command line, and the init script does do
#  that!
#pidFile = /var/run/ministry/archivist.pid

#  The tick_msec value is used by an internal thread to mark time, and it
#  also helps define the responsiveness of archivist to shutdown
#tickMsec = 20

#  By default, archivist alters its nofile and nproc limits to the current
#  hard limit, but these can be set lower if desired.
#limits.procs = 4096
#limits.files = 4096

#  Normally archivist-copy will remain connected to the initiating terminal, to
#  support such run environments as supervisord.  However, either via config
#  or a command-line option, archivist can background itself with the daemon()
#  system call, disconnecting from the terminal.
#daemon = 0

#  Archivist will frequently be run from some kind of supervisor, able to
#  restart it if it exits - supervisor, docker, or systemd.  To make use of
#  this, and to support config change automation, archivist can monitor the
#  mtime of all config files it read to start up.  Note: this does not check
#  any features of url configs - only local files.  If a file cannot be
#  stat'ed, archivist waits 3 cycles before declaring it different.  This will
#  permit the file to be moved and moved back quickly without triggering
#  the behaviour.  But if it can stat the file and the mtime is not the same
#  as when it was read, it triggers the change behaviour.

#  Upon noting a changed mtime, or a file unstatable for 3 cycles, archivist
#  will EXIT (with return code 0).

#  To enable this behaviour, the check time is set to a number of seconds > 0.
#  It defaults to 0 - disabled.
#checkMonitorSec = 0


[Logging]
#  Log level is one of: debug info notice warn err fatal
#  Either notice or info is recommended
#level = info

#  Logging is buffered up until the file is opened successfully.  If you are
#  Using logrotate, a pkill -HUP archivist will cause the file to be closed
#  and reopened.

#  Archivist can log to syslog, and the special filename 'syslog' will cause
#  this behaviour.  By default, however, archivist logs to stdout, to make
#  it easier to use in containers
#file = -

#  When the log file is reopened after log rotation (a HUP signal causes the
#  file handle to be closed and opened) the logger writes a line to say that
#  the log file was re-opened.  This means it will always be a non-zero file
#  size, meaning logrotate notifempty will not trigger.  This is turned on by
#  default, so set to zero if you wish to disable this line.
#notify = 1

#  Some syslog setups print the syslog level; some do not.  So the writing of
#  the log level in the message can be controlled.  It is on by default.
#writeLevel = 1

#  When using syslog, Archivist defaults to LOG_LOCAL4 facility and identifier
#  'archivist'.  These can be set (though have no effect unless syslog output
#  is selected.
#facility = LOG_LOCAL4
#identifier = archivist


[Memory]
#  This is the direct control of the memory management code within archivist.
#  Archivist eschews a lot of malloc and free in favour of keeping structures
#  and re-using them.  This gives us some tuning parameters and avoids long-
#  term fragmentation issues.

#  Archivist keeps an eye on its overall RSS, and will exit if it uses too
#  Much.  It keeps buffers when a given target is unavailable, and these can
#  back up significantly.  The default is 6GB
#maxMB = 6172

#  The maxMb value is also expressible as max KB if you want more precise
#  control.  Don't use both - last one wins
#maxKB = 6291456

#  The interval of memory checking is configurable as well - this is how
#  many MSEC ministry waits in betweeen RSS checks
#interval = 5000

#  The memory checking routine can be disabled, but is on by default
#doChecks = 1

#  Archivist can pre-allocate busy memmory types to try and avoid the rather
#  expensive brk() call to allocate more space for them happening within a
#  receive/process cycle.  It looks for the free count of a type of object
#  falling below about a third of its allocation block size and pre-emptively
#  allocates some more.  If your installation is subject to very rapid onset
#  of load, like in-rush load tests of the monitored estate, this can be
#  tuned lower.  Value is in MSEC.
#prealloc = 50



#  Each of archivist's memory-controlled types is pre-allocated in blocks
#  which are made into the 'free list' of structs of that type.  They all
#  have ->next elements first, and that's how it works.  So each can be
#  pre-allocated in configurable blocks.  Powers of two please.  Future
#  releases might force this by changing it to require the power of two to
#  use, not the resulting number (eg 128 might become 7)

#  Iobufs are used for sending data on to targets, and receiving from hosts
#iobufs.block = 128

#  Iobps (IO buf pointers) is used to manage sending one buf to multiple
#  targets
#iobps.block = 512

#  Htreqs are http request objects
#htreqs.block = 128

#  Host structures are for controlling a connected source of data
#hosts.block = 128



[Http]
#  Archivist uses libmicrohttpd to embed a webserver.  It uses it the main
#  query interface, so it is enabled by default, unlike the other Ministry
#  apps.

#  Libmicrohttpd understands HTTPS and can manage ciphers and certificates,
#  so a little config is provided to govern that.  Certificates provide one
#  of the few breaks to archivist's lights-out philosophy, in that if a
#  cert requires a password and you do not wish to store it anywhere in
#  config, archivist can interactively prompt the user on the command-line
#  for the password.

#  Which port archivist listens on is specified for http and https, and
#  which is in use is determined by whether https is enabled.
#port = 9083

#  Archivist can bind either to a specific IP address or to all interfaces
#bind = 0.0.0.0

#  The entire webserver can be enabled or disabled.  It is off by default.
#enable = 1


#  Archivist exposes libmicrohttpd's controls on maximum connections per
#  IP, maximum overall and connection timeouts.
#conns.max = 256
#conns.maxPerIP = 64

#  The timeout is in seconds
#conns.timeout = 10


#  Control of TLS is around certificates and ciphers.  Archivist uses the
#  facilities of libmicrohttpd to handle this.

#  Determines whether TLS is enabled
#tls.enable = 0

#  The TLS port is not the same as the non-TLS port normally, but there is
#  no problem setting them to be the same.  Whether TLS is enabled or not
#  determines which port archivist uses.
#tls.port = 9446

#  Certificate and key files are relative to the basedir unless they begin
#  with a /
#tls.certFile =
#tls.keyFile =

#  If a password is needed for the keyfile, it should be provided in config
#  or interactively on startup (archivist can prompt for it if required -
#  this is set either by passing the -K flag, or configuring the password
#  as the special value "-".  The special value "null" will keep the
#  password unset (it is provided as a reminder for the admin that there is
#  no password set on the key).
#tls.keyPass =


#  Archivist sets a TLS priorities string (see
#  https://gnutls.org/manual/html_node/Priority-Strings.html).  This allows
#  control of ciphers and protocols for TLS.  The default enabled TLSv1.3,
#  TLSv1.2, and only 256-bit ciphers from certain suites.  Change this if
#  you need to support clients with older TLS libraries.  At some point in
#  the future, archivist will remove support for TLSv1.2.
#tls.priority = "SECURE256:!VERS-TLS1.1:!VERS-TLS1.0:!VERS-SSL3.0:%SAFE_RENEGOTIATION"



[Iplist]
#  Archivist has the concept of IP lists - a list of whitelist/blacklist
#  entries used to decide if an IP address matches for a given purpose.
#  Rather than have them at the site of the calling config - for example,
#  prefixing, or accept filtering, Archivist has named IP lists, which are
#  then referenced by these calling configs.  There is no limit to the
#  number of them.

#  Lists need a unique name, a hashsize (individual IPs are hashed, but
#  networks done with masking).  They can be logged out during startup if
#  marked as verbose.  They can default to match or miss.  They can be
#  individually enabled/disabled.

#  IP lists can take a parameter after the IP spec, which is recorded as
#  text.  This is the way they are used for prefixing, where the text
#  after a given entry is used as the prefix.  The other use case is for
#  filtering connections; any text after the spec will be ignored.

#  Each IP list is configured with a set of entries, terminating in a
#  'done' statement.  Ordering of list entries is preserved, and they are
#  checked in that order.  So, if there are three entries:

#  match:  10.0.1.0/24
#  miss:   10.0.0.0/22
#  match:  10.0.0.0/16

#  Then 10.0.1.2 will match, 10.0.0.2 will not, but 10.0.20.2 will.

#  An example filter list looks like this:
#name = Approved Hosts
#enable = 1
#default = 0
#verbose = 0
#hashsize = 2003
#match = 10.32.0.0/23
#match = 10.32.2.0/23
#match = 10.32.7.161
#match = 10.32.7.162
#match = 10.32.7.163
#miss = 10.32.0.0/18
#match = 10.32.0.0/16
#done

#  IP Lists are also used for prefixing.

#  Arguments are of the form of "<specifier> <prefix>." with a trailing dot.
#  Prefix sanitisation is limited to making sure there is a trailing dot.
#  A different line parser function is invoked if a host matches for prefix
#  prepending, which copies the string into a buffer before working on it.
#  This places different limits on the size of paths allowed, and at present
#  it is hardcoded to prefix + path maxing out at 8191 bytes.  Prefixes
#  themselves are capped at 1023 bytes.  Excess whitespace before the prefix
#  is ignored, allowing lined-up formatting

#  An example prefixing list looks like this:
#name = Prefixes
#enable = 1
#default = 0
#hashsize = 2003
#entry = 10.32.0.9       hosts.pentesting.
#entry = 10.32.1.0/24    net.dmz.
#entry = 10.23.2.0/28
#entry = 10.32.2.0/23    net.protected.
#done

#  The entry with no prefix will simply have no prefix



[Io]
#  Archivist's network IO is asynchronous with threads that write to network,
#  to prevent blocking during time-sensitive operations.  It also has the
#  virtue that sending the same content to multiple targets becomes easy, as
#  buffers are written and then attached to IO threads to writing.  Multiple
#  targets are indepdendently tracked, with IO buffering handled separately,
#  so one unresponsive target will not prevent working ones from receiving
#  data.

#  This means that separate threads are created for each target, and they
#  will look for data to send on an interval.  This is controllable in
#  either USEC or MSEC.
#sendUsec = 11000
#  or
#sendMsec = 11

#  Archivist will pause before attempting to reconnect to a dead target, as
#  the most likely cause is either a process restart or host restart, and
#  those may not be instant.
#reconnectMsec = 2000



[Network]
#  Network timeout sets how long a source connection has to be silent for
#  before we consider it dead and close the connection.  Don't set this too
#  low or clients will keep having to reconnect.
#  This value is in SECONDS
#timeout = 3600

#  Archivist listens for UDP packets if configured to do so, but by default
#  recv() just waits forever.  Thus we set a receive timeout value and loop
#  around in quiet times.  This value affects how responsive ministry is to
#  shutdown.  You shouldn't need to change it.  It is in SECONDS.
#rcvTmout = 3


#  Archivist can prepend fixed strings to paths received from hosts that
#  connect with TCP and are specified in config.  The strings are prepended
#  at network receive time, so later functions like synthetics will perceive
#  the updated path, not the original path.  This is done by creating a
#  prefix-style IP List and then selecting it for use here.
#prefix = <name>


#  Archivist can also enforced IP Lists for connecting clients.  An IP list
#  is created and then referenced within network config
#filterList = <name>



#  Archivist can use either TCP or UDP to receive metrics; all it asks of
#  the format is that the first string present in the line (delimited by
#  space or colon) is suitable for hashing.

#  Archivist operates a thread per connected source, and separate thread
#  bound to the listening port.

#  UDP ports do not permit the same behaviour, so a single thread listens on
#  each UDP port.  To permit multiple threads to handle UDP traffic, multiple
#  ports must be specified, and the clients should load-balance themselves
#  across this.  Alternative, on Linux, Iptables may be capable of helping.
#  There is no requirement to make one client sticky to one point.

#  By default, IP whitelist/blacklist checks and path prefixing are not
#  done on UDP data as they impact performance.  This can be lit up, type
#  by type, with a specific checks options.


#  The rest of the configuration is applied either to TCP or UDP, with the
#  protocol as the first element of the config line.


#  Enable/disable a given protocol
#tcp.enable = 1
#udp.enable = 1

#  do checks with ip whitelist/blacklists and do prefixing (TCP only)
#tcp.checks = 0
#udp.checks = 0

#  Ports - a comma-separated list of UDP listen ports; it makes no sense
#  to have multiple TCP ports.
#tcp.port  = 3901
#udp.port  = 3901


#  bind address - which IP address to bind to.  Defaults to all.
#tcp.bind  = 0.0.0.0
#udp.bind  = 0.0.0.0

#  TCP backlog - how many outstanding connections to queue up
#  This is limited by the value of /proc/sys/net/core/somaxconn
#tcp.backlog  = 32


[File]
#  Archivist keeps metrics data in .rkv files, which are themselves quite
#  similar to round-robin databases (rrd's) or Graphite's Whisper .wsp file
#  format.  A key difference is that while the first cylinder resembles
#  those other formats, being just <timesamp>:<value> entries, all other
#  (rollup) cylinders do not - they are larger and hold multiple values,
#  <timestamp>:<count>:<sum>:<min>:<max>

#  Values put into the first cylinder, follow rrd rules - last one in wins.
#  However, all values are added into the appropriate rollup cylinder at
#  arrival time, and added to the sum for the relevant timestamp, as well
#  as compared to the current min and max, possibly replacing one or other.

#  This means the .rkv files give the original values in the first cylinder
#  but do not force a choice of aggregation method, nor the choice of how
#  many full-resolution values must be present to cause aggregation.

#  This offers, within rollup cylinders, a choice of metric to fetch:
#    count   - how many values were received
#    sum     - the raw sum
#    average - the mean value, equal to sum/count
#    min     - the lowest value in that time window
#    max     - the highest value in that time window
#    spread  - the spread of values, equal to max-min
#    middle  - the average of the max and min
#    range   - the propotional spread of values, equal to (max-min)/average


#  Archivist will translate dot-delimited paths into file paths, and create
#  files inside a configured base directory.
#basePath = /opt/archivist/files


#  By default, archivist leaves syncing to disk to the host OS, and lets
#  it's VMM implementation decide on writes.  It can, however, sync upon
#  write.  Warning:  This may generate a lot of IO.
#sync = 0


#  Archivist has a number of threads passing over the metric tree to flush
#  new data points into the mmap'd files.
#ioThreads = 5


#  Archivist will unmap a file it is seems to go quiet - no new points
#  arriving.  This reduces memory footprint but unmap'd files will have to
#  be re-opened when new data arrives.  Tune this value to reduce memory
#  footprint
#maxFileOpenSec = 120


#  Archivist maps metric paths to retention schemes, in a similar way to
#  Graphite.  It uses a list of regular expression lists to map paths to
#  a set of retention buckets, 

#  Config is written in blocks, with the retention scheme and set of regex
#  to match to.  One block is the default for when nothing matches (or one
#  can match '^.', but make this one the last one).  A scheme can be set as
#  default explicitly, even if it is not last.

#  Buckets are specified as a semi-colon (;) separated list of pairs, being
#  the resolution time, or period, of the bucket, and the total time, those
#  being separated by a colon (:).  The maximum buckets is 6.

#  There is a default set of retention times that is used if no other config
#  is provided - "10s:2d;60s:30d", ie 10 seconds for 2 days, and 60 seconds
#  for 30 days.
#retention.name = apache-metrics
#retention.bucket = 1s:1d;30s:30d
#retention.fail = ^apache\.mem\.
#retention.match = ^apache\.
#retention.default = no
#retention.done

#retention.name = everything else
#retention.match = .
#retention.default = yes
#retention.buckets = 10s:5d;60s:30d
#retention.done


[Tree]
#  Archivist maintains both a hash table and a tree structure for metrics;
#  the tree structure is used by queries, but the hash of complete paths is
#  maintained for fast metric receiving.  Config can give a hint about the
#  number of metrics expected.  The default size (xlarge) will behave well
#  with up to about a million metrics, but will result in unnecessary CPU
#  usage by IO threads as they pass over the metric hash.  Tuning this to
#  between 50% to 110% of the expected number of metrics will give best
#  results.

#  It uses the same hash sizes as are explained elsewhere
#  tiny    => 1009
#  small   => 5003
#  medium  => 25013
#  large   => 100003 (same as the default mem.hashsize)
#  xlarge  => 425071
#  x2large => 1300021

#  Archivist scans the file tree upon startup, so this number can be changed
#  in config and archivist restarted.
#hashSize = xlarge


[Query]
#  Archivist accepts queries over HTTP (the format is explained elsewhere)
#  and little config is needed for that.  The few items are to restrict
#  overly broad queries and to provide a default span time for queries where
#  no timestamps are given.


#  The default time span is uses whenever no from and to time are given.  If
#  just one is given, this is used to select the other.  If neither are given,
#  then 'to' defaults to the current time.  The value is a time span, with the
#  usual rules
#defaultSpan = 60m


#  If an overly broad query is given (eg '#', which matches ALL paths), then
#  the query search will abort once the maximum paths is reached.
#maxPaths = 2500



#  file to be added, configMap'd in, and override anything and add targets
include-dir = ?/etc/ministry/archivist.d

