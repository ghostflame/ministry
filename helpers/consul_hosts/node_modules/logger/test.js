var logmod = require( './main.js' );
var logger = new logmod( );
var logr   = logger.delegate( 'DELEGATE' );

logger.setLevel( 'INFO' );

logger.info( 'This is a test.' );
logr.info( 'This is also a test.' );
logr.showMe( 'This should not show', { foo: 'bar' } );

logger.setFile( 'output.log' );

var oc = 0;
process.on( 'OutChanged', function( state ) { oc++; } );
logger.watchFile( 'output.log', 'OutChanged', 50 );

logr.info( 'This should be in the file.' );

logger.setFile( null );

logr.notice( 'But this should not.' );

logger.setLevel( 'WARN' );
logr.notice( 'This should not be seen.' );
logger.warn( 'But this should.' );

logger.setLevel( 'DEBUG' );

var testObj = {
    foo:    {
        bar:    {
            eek:    0,
        },
    },
};
logr.showMe( 'This should show', testObj );
logr.showMe( 'This should be truncated', testObj, 1 );


var multi = logger.delegate( [ 'Multiple', 'Levels' ] );
multi.warn( 'This is a multi-level delegation test.' );

var many = multi.delegate( 'Extra' );
many.warn( 'This is getting very silly.' );

many.setLevel( 'NOTICE' );
many.info( 'Tests fail if this is seen.' );
many.notice( 'Tests pass is this is seen.' );


setTimeout( function( ) {
    logger.info( 'Saw ' + oc + ' change to output.log' );
    logr.exit( 0 );
}, 100 );

