Date.prototype.getPadMonth = function( ) {
  var mon = 1.0 + this.getMonth( );
  return ( mon < 10 ) ? '0' + mon : mon.toString( );
};

Date.prototype.getPadDate = function( ) {
  var day = this.getDate( );
  return ( day < 10 ) ? '0' + day : day.toString( );
};

Date.prototype.getPadHours = function( ) {
  var hour = this.getHours( );
  return ( hour < 10 ) ? '0' + hour : hour.toString( );
};

Date.prototype.getPadMinutes = function( ) {
  var min = this.getMinutes( );
  return ( min < 10 ) ? '0' + min : min.toString( );
};

Date.prototype.getPadSeconds = function( ) {
  var sec = this.getSeconds( );
  return ( sec < 10 ) ? '0' + sec : sec.toString( );
};


Date.prototype.getUTCPadMonth = function( ) {
  var mon = 1.0 + this.getUTCMonth( );
  return ( mon < 10 ) ? '0' + mon : mon.toString( );
};

Date.prototype.getUTCPadDate = function( ) {
  var day = this.getUTCDate( );
  return ( day < 10 ) ? '0' + day : day.toString( );
};

Date.prototype.getUTCPadHours = function( ) {
  var hour = this.getUTCHours( );
  return ( hour < 10 ) ? '0' + hour : hour.toString( );
};

Date.prototype.getUTCPadMinutes = function( ) {
  var min = this.getUTCMinutes( );
  return ( min < 10 ) ? '0' + min : min.toString( );
};

Date.prototype.getUTCPadSeconds = function( ) {
  var sec = this.getUTCSeconds( );
  return ( sec < 10 ) ? '0' + sec : sec.toString( );
};


Date.prototype.getPadMilliseconds = function( ) {
  var ms = this.getMilliseconds( );
  return ( ms < 10 ) ? '00' + ms : ( ( ms < 100 ) ? '0' + ms : ms.toString( ) );
};



// useful summary functions
Date.prototype.getPadClock = function( ) {
    return this.getPadHours( ) + ':' + this.getPadMinutes( ) + ':' + this.getPadSeconds( );
};

Date.prototype.getUTCPadClock = function( ) {
    return this.getUTCPadHours( ) + ':' + this.getUTCPadMinutes( ) + ':' + this.getUTCPadSeconds( );
};


var addMonthNames = function( ) {

    var mshort = [
        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
    ];
    var mlong = [
        'January', 'February', 'March', 'April', 'May', 'June', 'July',
        'August', 'September', 'October', 'November', 'December',
    ];
    
    Date.prototype.getMonthShort = function( ) {
        return mshort[this.getMonth( )];
    };
    Date.prototype.getUTCMonthShort = function( ) {
        return mshort[this.getUTCMonth( )];
    };
    Date.prototype.getMonthLong = function( ) {
        return mlong[this.getMonth( )];
    };
    Date.prototype.getUTCMonthShort = function( ) {
        return this._MonthNamessLong[this.getUTCMonth( )];
    };

    Date.prototype.getNamedMonth = function( mon ) {
        
        if( !mon ) {
            return -1;
        }
        var arr = ( mon.length === 3 ) ? mshort : mlong;

        for( var i = 0; i < arr.length; i++ ) {
            if( mon === arr[i] ) {
                return i;
            }
        }
        return -1;
    };
}( );


var addDayNames = function( ) {

    // hide these
    var dshort = [
        'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',
    ];
    var dlong = [
        'Sunday', 'Monday', 'Tuesday', 'Wednesday',
        'Thursday', 'Friday', 'Saturday',
    ];

    Date.prototype.getDayShort = function( ) {
        return dshort[this.getDay( )];
    };
    Date.prototype.getUTCDayShort = function( ) {
        return dshort[this.getUTCDay( )];
    };
    Date.prototype.getDayLong = function( ) {
        return dlong[this.getDay( )];
    };
    Date.prototype.getUTCDayLong = function( ) {
        return dlong[this.getUTCDay( )];
    };

    // return the actual names
    Date.prototype.getDayNamesShort = function( ) {
        return dshort;
    };
    Date.prototype.getDayNamesLong = function( ) {
        return dlong;
    };

    Date.prototype.getNamedDay = function( day ) {
        
        if( !day ) {
            return -1;
        }
        var arr = ( day.length === 3 ) ? dshort : dlong;

        for( var i = 0; i < arr.length; i++ ) {
            if( day === arr[i] ) {
                return i;
            }
        }
        return -1;
    };
}( );

var addParseLamp = function( ) {

    var regex = /^\[?(\d+)\/(\w+)\/(\d{4}):(\d\d):(\d\d):(\d\d)\.(\d{6}) \+(\d{2})(\d{2})\]?$/;

    Date.prototype.parseLamp = function( str ) {

        var matches;

        if( !( matches = str.match( regex ) ) ) {
            throw new Error( 'Invalid LAMP date format (' + str + ')' );
        }

        var month = this.getNamedMonth( matches[2] );

          if( month < 0 ) {
            throw new Error( 'Invalid LAMP date format (month)' );
          }

          var tzHours           = parseInt( matches[8] );
          var tzMinutes         = parseInt( matches[9] )

          this.setYear(           parseInt( matches[3] ) );
          this.setMonth(                    month );
          this.setDate(           parseInt( matches[1] ) );
          this.setHours(          parseInt( matches[4] ) + tzHours );
          this.setMinutes(        parseInt( matches[5] ) + tzMinutes );
          this.setSeconds(        parseInt( matches[6] ) );
          this.setMilliseconds( Math.floor( matches[7] / 1000 ) );

          return this.getTime( );
    };
}( );

// we don't have microseconds, so fill in 000
Date.prototype.toLamp = function( ) {

    var tzMinutes = -1 * this.getTimezoneOffset( );
    var tzHours   = Math.floor( tzMinutes / 60 );
    tzMinutes     = tzMinutes % 60;

    var tzM = ( ( tzMinutes >= 9 ) ? '' : '0' ) + tzMinutes;
    var tzH = ( ( tzHours >= 9 )   ? '' : '0' ) + tzHours;

    return this.getPadDate( )
         + '/'
         + this.getMonthShort( )
         + '/'
         + this.getFullYear( )
         + ':'
         + this.getPadHours( )
         + ':'
         + this.getPadMinutes( )
         + ':'
         + this.getPadSeconds( )
         + '.'
         + this.getPadMilliseconds( )
         + '000 +'
         + tzH + tzM;
};


Date.prototype.toMsString = function( ) {

      var ms  = this.getPadMilliseconds( );
      var str = this.toString( );
      return str.substr( 0, 24 ) + '.' + ms + str.substr( 24, 9 );
};


// configure date object from openbet date log
var addObParse = function( ) {

    var regex = /^(\d\d)\/(\d\d)-(\d\d):(\d\d):(\d\d)\.(\d\d\d)/;

    Date.prototype.parseOpenbet = function( str ) {

        var matches;

        if( !( matches = str.match( regex ) ) ) {
            throw new Error( 'Invalid Openbet date format' );
        }

        // note, year defaults to current
        this.setMonth( parseInt( matches[1] ) - 1 );
        this.setDate(            matches[2] );
        this.setHours(           matches[3] );
        this.setMinutes(         matches[4] );
        this.setSeconds(         matches[5] );
        this.setMilliseconds(    matches[6] );

        return this.getTime( );
    };
}( );

Date.prototype.toOpenbet = function( ) {

    return this.getPadMonth( )   + '/' + this.getPadDate( )    + '-' +
           this.getPadHours( )   + ':' + this.getPadMinutes( ) + ':' +
           this.getPadSeconds( ) + '.' + this.getPadMilliseconds( );
};


Date.prototype.toOpenbetHour = function( ) {
    return this.getFullYear( )
        + this.getPadMonth( )
        + this.getPadDate( )
        + '_'
        + this.getPadHours( );
};


var addForParse = function( ) {

    var regex = /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2}),(\d{3})/;

    Date.prototype.parseFog = function( str ) {

        var matches;

        if( !( matches = str.match( regex ) ) ) {
            throw new Error( 'Invalid FOG date format' );
        }

        this.setYear(            matches[1] );
        this.setMonth( parseInt( matches[2] ) - 1 );
        this.setDate(            matches[3] );
        this.setHours(           matches[4] );
        this.setMinutes(         matches[5] );
        this.setSeconds(         matches[6] );
        this.setMilliseconds(    matches[7] );

        return this.getTime( );
    };
}( );

Date.prototype.toFog = function( ) {

    return this.getFullYear( )
         + '-'
         + this.getPadMonth( )
         + '-'
         + this.getPadDate( )
         + ' '
         + this.getPadHours( )
         + ':'
         + this.getPadMinutes( )
         + ':'
         + this.getPadSeconds( )
         + ','
         + this.getPadMilliseconds( );
};



/*
 * ISO Week:  Defined as, week 1 is the first thursday of the year.
 *
 * This means week 0 and week 53 can occur.
 *
 * Calculate by finding the thursday in the current week, and the first
 * one of the year, then the number of weeks difference (which can be -1)
 * and then adding 1.
 *
 * This gives 0-53
 *
 * Oh and ISO week starts on a monday, which is why findThursday checks for
 * day-of-week == 0, and deducts 7 days from the result if it is - the
 * thursday for a sunday is the one before it, not after it.
 *
 * The year check is so that first thursday of the year is IN the year, but
 * the thursday-of-the-week *can* be in the previous year.
 */

var findThursday = function( d, year ) {

    var dow = d.getDay( );
    var add = ( ( dow == 0 ) ? -3 : 4 ) - dow;

    var ms  = d.getTime( );
    d.setTime( ms + ( add * 86400000 ) );

    // make sure we are in the year
    while( d.getFullYear( ) < year ) {
        d.setTime( d.getTime( ) + 604800000 );
    }
};

Date.prototype.getIsoWeek = function( ) {

    var y, t, wks, year, tzo;

    year = this.getFullYear( );
    // handle GMT/BST
    tzo  = -60000 * this.getTimezoneOffset( );

    // make a new date object and find thursday
    t = new Date( this.valueOf( ) );
    findThursday( t, year - 1 );

    // find the first thursday of the year
    y = new Date( this.valueOf( ) );
    y.setMonth( 0, 1 );
    findThursday( y, year );

    wks = 1 + Math.floor( Math.floor( ( tzo + t.getTime( ) - y.getTime( ) ) / 86400000 ) / 7 );

    return ( wks < 10 ) ? '0' + wks : wks.toString( );
};




// set midnight as requested

Date.prototype.setUTCMidnight = function( ) {

    this.setUTCHours( 0 );
    this.setUTCMinutes( 0 );
    this.setUTCSeconds( 0 );
    this.setUTCMilliseconds( 0 );

    return this;
}

Date.prototype.setMidnight = function( ) {

    this.setHours( 0 );
    this.setMinutes( 0 );
    this.setSeconds( 0 );
    this.setMilliseconds( 0 );

    return this;
};


