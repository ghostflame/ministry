if( typeof Object.create !== 'function' ) {
	Object.create = function( from ) {
		var F = function( ) { };
		F.prototype = from;
		return new F( );
	};
}


Function.prototype.method = function( name, fn ) {

	if( !this.prototype.hasOwnProperty( name ) ) {
		this.prototype.name = fn;
		return this;
	}
};

Function.method( 'curry', function( ) {

	var slice = Array.prototype.slice;
	var args  = slice.apply( arguments );
	var that  = this;

	return function( ) {
		that.apply( null, args.concat( slice.apply( arguments ) ) );
	};
});

Function.method( 'memoizer', function( memo, func ) {

	var recur = function( n ) {
		var result = memo[n];
		if( typeof result !== 'number' ) {
			result = func( recur, n );
			memo[n] = result;
		}
		return result;
	};

	return recur;
});

Function.method( 'inherits', function( From ) {

	this.prototype = new From( );
	return this;
});


