/*
 * Printf functionality
 */

function _snprintf_one_string( a ) {

  var ret = a.value.toString( );

  // do we need to pad it?
  if( ret.length < a.length ) {

    var diff = a.length - ret.length;
    var pad  = '';
    while( diff-- > 0 ) {
      pad += ' ';
    }

    if( a.justify ) {
      // that means starting from the left
      ret = ret + pad;
    } else {
      // that means prepend space
      ret = pad + ret;
    }
  }

  return ret;
}


function _printf_pad_number( ret, a ) {

  var diff = a.length - ret.length;
  var pads = '';
  var padz = '';

  while( diff-- > 0 ) {
    padz += '0';
    pads += ' ';
  }

  if( a.justify ) {
    return ret + pads;
  }

  return ( ( a.zeropad ) ? padz : pads ) + ret;
}


function _snprintf_one_int( a, rdx ) {

  var ret = parseInt( a.value.toString( ) ).toString( rdx );

  if( ret.length < a.length ) {
    ret = _printf_pad_number( ret, a );
  }

  return ret;
}


function _snprintf_one_float( a ) {

  var v = parseFloat( a.value.toString( ) );
  var ret;

  if( a.places ) {
    ret = v.toFixed( a.places );

    if( ret.length < a.length ) {

      ret = _printf_pad_number( ret, a );

    } else if( a.length && ret.length > a.length ) {

      // chop down the precision
      while( ret.length > a.length ) {
        // have we removed the last decimal place?
        if( ret.substr( -1 ) == '.' ) {
          // TODO why isn't this working?
          ret = ret.replace( /\.$/, '' );
          break;
        } else {
          ret = ret.replace( /\d$/, '' );
        }
      }

    }
  }


  return ret.replace( /\.$/, '' );
}



function _snprintf_one_arg( a ) {

  /*
  var u = require( 'util' );
  console.log( u.inspect( a, true, 3, true ) );
  */

  switch( a.type ) {
    case 's':
      return _snprintf_one_string( a );
    case 'c':
      return a.value.toString( ).charCodeAt( 0 );
    case 'd':
      return _snprintf_one_int( a, 10 );
    case 'o':
      return _snprintf_one_int( a, 8 );
    case 'x':
      return _snprintf_one_int( a, 16 );
    case 'X':
      return _snprintf_one_int( a, 16 ).toUpperCase( );
    case 'f':
      return _snprintf_one_float( a );
  }

  return '??';
}


function _snprintf_real( max, fmt, args ) {

  var out = '';
  var nlen = 0;
  var dlen = 6;
  var patt = /^(%|(-)?(0)?(([1-9][0-9]*)(\.([0-9])?)?)?([doxXfcs]))/;
  var matches;
  var ind = 0;

  if( args.constructor != Array ) {
    args = [ args ];
  }

  while( fmt.length ) {

    // length check
    if( max > 0 && out.length == max ) {
      break;
    }

    // take one char
    var c = fmt.charAt( 0 );
    fmt   = fmt.substr( 1 );

    // regular character?
    if( c != '%' ) {
      out += c;
      continue;
    }

    // look for a valid format identifier
    if( !( matches = fmt.match( patt ) ) ) {
      // errrmmm, broken
      out += fmt;
      break;
    }

    // did we match a %?
    if( matches[1] == '%' ) {
      out += '%';
      fmt  = fmt.substr( 1 );
      continue;
    }

    // do we have an argument for it?
    if( ind >= args.length ) {
      // just copy the rest and finish
      out += '%' + fmt;
      break;
    }

    // step over the matching section
    fmt = fmt.substr( matches[1].length );

    var conv = {
      format:       matches[1],
      justify:      ( matches[2] == '-' ),
      zeropad:      ( matches[3] == '0' ),
      length:       matches[5] || 0,
      places:       matches[7] || 6,
      type:         matches[8],
      value:        args[ind++],
    };

    // and add in the formatted argument
    out += _snprintf_one_arg( conv );
  }

  return out;
}

// add the calls to String
String.prototype.snprintf = function( len, args ) {
    return _snprintf_real( len, this.toString( ), args );
};
String.prototype.sprintf = function( args ) {
    return _snprintf_real( -1, this.toString( ), args );
};
String.prototype.printf = function( args ) {
    console.log( _snprintf_real( -1, this.toString( ), args ) );
};

// and export them explicitly
module.exports.snprintf = _snprintf_real;
module.exports.sprintf = function( fmt, args ) {
    return _snprintf_real( -1, fmt, args );
};
module.exports.printf = function( fmt, args ) {
    console.log( _snprintf_real( -1, fmt, args ) );
};

module.exports.addArrayPrintf = function( ) {
    // and crazy things to add to arrays!
    Array.prototype.snprintf = function( len, fmt ) {
        return _snprintf_real( len, fmt, this );
    };
    Array.prototype.sprintf = function( fmt ) {
        return this.snprintf( -1, fmt );
    };
    Array.prototype.printf = function( fmt ) {
        console.log( this.snprintf( -1, fmt ) );
    };

    // join array elements each printed to a format
    Array.prototype.toStringF = function( fmt, sep ) {
        return this.map( function( e ) {
            return _snprintf_real( -1, fmt, e );
        } ).join( sep || ',' );
    };
    // print out an array joined with one format, to another
    Array.prototype.asnprintf = function( len, fmt, sep, singleFormat ) {
        return _snprintf_real( len, fmt, this.toStringF( singleFormat || '%s', sep ) );
    };
    Array.prototype.asprintf = function( fmt, sep, singleFormat ) {
        return _snprintf_real( -1, fmt, this.toStringF( singleFormat || '%s', sep ) );
    };
    Array.prototype.aprintf = function( fmt, sep, singleFormat ) {
        console.log( this.asnprintf( -1, fmt, sep, singleFormat ) );
    };
};

// add properties to an array object
module.exports.addArrPrintf = function( arr ) {

    arr.snprintf = function( len, fmt ) {
        return _snprintf_real( len, fmt, this );
    };

    arr.sprintf = function( fmt ) {
        return this.snprintf( -1, fmt );
    };

    arr.printf = function( fmt ) {
        console.log( this.snprintf( -1, fmt ) );
    };

    arr.toStringF = function( fmt, sep ) {
        return this.map( function( e ) {
            return _snprintf_real( -1, fmt, e );
        }).join( sep || ',' );
    };

    arr.asnprintf = function( len, fmt, set, singleFormat ) {
        return _snprintf_real( len, fmt, this.toStringF( singleFormat || '%s', sep ) );
    };

    arr.asprintf = function( fmt, sep, singleFormat ) {
        return _snprintf_real( len, fmt, this.toStringF( singleFormat || '%s', sep ) );
    };

    arr.aprintf = function( fmt, sep, singleFormat ) {
        console.log( this.asnprintf( -1, fmt, sep, singleFormat ) );
    };
};

